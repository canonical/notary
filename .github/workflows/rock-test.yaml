name: Rock Test

on:
  workflow_call:

jobs:
  test-rock:
    strategy:
      matrix:
        arch:
          - arch: amd64
            runner: ubuntu-22.04
          - arch: arm64
            runner: [self-hosted, linux, ARM64, medium, jammy]
    runs-on: ${{ matrix.arch.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: rock-${{ matrix.arch.arch }}
          path: ./rock-path
      - name: Install pre-requisites
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl jq
          sudo snap install rockcraft --classic
      - name: Create files required by Notary
        run: |
          printf 'key_path:  "/etc/notary/config/key.pem"\ncert_path: "/etc/notary/config/cert.pem"\ndb_path: "/var/lib/notary/database/notary.db"\nport: 3000\npebble_notifications: true\nlogging:\n  system:\n    level: "debug"\n    output: "stdout"\nencryption_backend: {}\n' > config.yaml
          openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 1 -out cert.pem -subj "/CN=githubaction.example"
      - name: Import the image to Docker registry
        run: |
          ROCK_FILE_NAME=$(ls ./rock-path)
          sudo rockcraft.skopeo --insecure-policy copy oci-archive:rock-path/$ROCK_FILE_NAME docker-daemon:notary:latest
      - name: Run the image
        run: |
          docker run -d -p 3000:3000 --name notary notary:latest
      - name: Load config
        run: |
          docker exec notary /usr/bin/pebble mkdir -p /etc/notary/config
          docker exec notary /usr/bin/pebble mkdir -p /var/lib/notary/database
          docker cp key.pem notary:/etc/notary/config/key.pem
          docker cp cert.pem notary:/etc/notary/config/cert.pem
          docker cp config.yaml notary:/etc/notary/config/config.yaml
          docker restart notary
      - name: Check if Notary frontend is loaded
        run: |
          sleep 30
          docker logs notary
          curl -k https://localhost:3000/certificate_requests.html 2>&1 | grep "<title>Notary</title>"
      - name: Test if pebble notify fires correctly
        id: test_notify
        run : |
          openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048
          openssl req -new -key private_key.pem -out request.csr -subj "/C=CA/ST=Quebec/L=Montreal/O=Test Company/OU=IT Department/CN=test.example.com"
          openssl req -x509 -new -nodes -key private_key.pem -sha256 -days 365 -out ca_certificate.pem -subj "/C=CA/ST=Quebec/L=Montreal/O=Test CA/OU=CA Department/CN=Test CA"
          openssl x509 -req -in request.csr -CA ca_certificate.pem -CAkey private_key.pem -CAcreateserial -out certificate.pem -days 365 -sha256
          CSR=$(cat request.csr | awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}')
          CERTIFICATE=$(cat certificate.pem ca_certificate.pem | awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}')

          curl -XPOST -k -d '{"username":"admin", "password": "Admin1234"}' https://localhost:3000/api/v1/accounts
          export ADMIN_TOKEN=$(curl -XPOST -k -d '{"username":"admin", "password": "Admin1234"}' https://localhost:3000/login | jq -r .result.token )

          curl -k --location 'https://localhost:3000/api/v1/certificate_requests' \
            --header "Authorization: Bearer $ADMIN_TOKEN" \
            --header 'Content-Type: application/json' \
            --data "{\"csr\":\"${CSR}\"}"

          curl -k --location 'https://localhost:3000/api/v1/certificate_requests/1/certificate' \
            --header "Authorization: Bearer $ADMIN_TOKEN" \
            --header 'Content-Type: application/json' \
            --data "{\"certificate\":\"${CERTIFICATE}\"}"
          
          docker exec notary /usr/bin/pebble notices
          docker exec notary /usr/bin/pebble notices | grep canonical\\.com
          docker exec notary /usr/bin/pebble notice 3
